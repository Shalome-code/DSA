package Graphs;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class GraphPractice {

    static void addEdge(ArrayList<ArrayList<Integer>> adj, int u,int v){
        adj.get(u).add(v);
        adj.get(v).add(u);
    }

    static void printGraph(ArrayList<ArrayList<Integer>> adj){
        for(int i=0;i<adj.size();i++){
            for(int j=0;j<adj.get(i).size();j++)
                System.out.print(adj.get(i).get(j)+" ");
            System.out.println();
        }
    }

    public static void main(String[] args){

        int v=5;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>(v);
        for(int i=0;i<v;i++)
            adj.add(new ArrayList<>());
        addEdge(adj,0,1);
        addEdge(adj,0,2);
        addEdge(adj,1,2);
        addEdge(adj,1,3);
        printGraph(adj);
        BFS(adj,3,0);


    }

    static void BFS(ArrayList<ArrayList<Integer>> adj, int v,int s){
        boolean visited[] =new boolean[v+1];
        Queue<Integer> qu=new LinkedList<Integer>();
        visited[s]=true;
        qu.add(s);
        while(qu.isEmpty()==false){
            int u= qu.poll();
            System.out.print(u+" ");
            for(int vi:adj.get(u)){
                if(visited[vi]==false)
                {
                    visited[vi]=true;
                    qu.add(vi);
                }
            }
        }
    }
}
